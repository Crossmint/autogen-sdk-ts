/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Crossmint from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace NftTemplates {
    interface Options {
        environment?: core.Supplier<environments.CrossmintEnvironment | string>;
        apiKey: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class NftTemplates {
    constructor(protected readonly _options: NftTemplates.Options) {}

    /**
     * Get all of the templates for a collection
     *
     * **API scope required**: `nfts.read`
     *
     * @param {string} collectionId - This is the identifier for the collection related to the request. Every project has default collections: `default-solana` and `default-polygon`.
     *
     *                                The [create-collection](/api-reference/minting/collection/create-collection) API will result in collections with UUID formatted `collectionId`.
     *                                **Example:** `9c82ef99-617f-497d-9abb-fd355291681b`
     *
     *                                The [create-collection-idempotent](/api-reference/minting/collection/create-collection-idempotent) API allows you to specify an arbitrary identifier during the intitial request.
     *                                **Example:** `your-custom-identifer`
     * @param {Crossmint.GetAllTemplatesRequest} request
     * @param {NftTemplates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Crossmint.BadRequestError}
     * @throws {@link Crossmint.ForbiddenError}
     * @throws {@link Crossmint.NotFoundError}
     * @throws {@link Crossmint.ServiceUnavailableError}
     *
     * @example
     *     await client.nftTemplates.getAllTemplates("default-solana", {
     *         page: 1.1,
     *         perPage: 20
     *     })
     */
    public async getAllTemplates(
        collectionId: string,
        request: Crossmint.GetAllTemplatesRequest,
        requestOptions?: NftTemplates.RequestOptions
    ): Promise<Crossmint.TemplateResponse[]> {
        const { page, perPage } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["page"] = page.toString();
        if (perPage != null) {
            _queryParams["perPage"] = perPage.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CrossmintEnvironment.Staging,
                `2022-06-09/collections/${encodeURIComponent(collectionId)}/templates`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "crossmint",
                "X-Fern-SDK-Version": "0.2.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.nftTemplates.getAllTemplates.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Crossmint.BadRequestError(_response.error.body);
                case 403:
                    throw new Crossmint.ForbiddenError(_response.error.body);
                case 404:
                    throw new Crossmint.NotFoundError(_response.error.body);
                case 503:
                    throw new Crossmint.ServiceUnavailableError(_response.error.body);
                default:
                    throw new errors.CrossmintError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CrossmintError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CrossmintTimeoutError();
            case "unknown":
                throw new errors.CrossmintError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a token template, that NFTs or SFTs may be minted from
     *
     * **API scope required**: `nfts.create`
     *
     * @param {string} collectionId - The ID of the named collection, used to create new tokens
     * @param {Crossmint.CreateTemplateBody} request
     * @param {NftTemplates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Crossmint.BadRequestError}
     * @throws {@link Crossmint.NotFoundError}
     * @throws {@link Crossmint.ConflictError}
     * @throws {@link Crossmint.FailedDependencyError}
     * @throws {@link Crossmint.ServiceUnavailableError}
     *
     * @example
     *     await client.nftTemplates.createTemplate("idempotent-collection-name", {})
     */
    public async createTemplate(
        collectionId: string,
        request: Crossmint.CreateTemplateBody,
        requestOptions?: NftTemplates.RequestOptions
    ): Promise<Crossmint.TemplateResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CrossmintEnvironment.Staging,
                `2022-06-09/collections/${encodeURIComponent(collectionId)}/templates`
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "crossmint",
                "X-Fern-SDK-Version": "0.2.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateTemplateBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TemplateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Crossmint.BadRequestError(_response.error.body);
                case 404:
                    throw new Crossmint.NotFoundError(_response.error.body);
                case 409:
                    throw new Crossmint.ConflictError(_response.error.body);
                case 424:
                    throw new Crossmint.FailedDependencyError(
                        serializers.FourHundredTwentyFourResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new Crossmint.ServiceUnavailableError(_response.error.body);
                default:
                    throw new errors.CrossmintError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CrossmintError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CrossmintTimeoutError();
            case "unknown":
                throw new errors.CrossmintError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Fetch the contents of a token template.
     *
     * **API scope required**: `nfts.read`
     *
     * @param {string} collectionId - This is the identifier for the collection related to the request. Every project has default collections: `default-solana` and `default-polygon`.
     *
     *                                The [create-collection](/api-reference/minting/collection/create-collection) API will result in collections with UUID formatted `collectionId`.
     *                                **Example:** `9c82ef99-617f-497d-9abb-fd355291681b`
     *
     *                                The [create-collection-idempotent](/api-reference/minting/collection/create-collection-idempotent) API allows you to specify an arbitrary identifier during the intitial request.
     *                                **Example:** `your-custom-identifer`
     * @param {string} templateId - The template ID
     * @param {NftTemplates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Crossmint.BadRequestError}
     * @throws {@link Crossmint.ForbiddenError}
     * @throws {@link Crossmint.NotFoundError}
     * @throws {@link Crossmint.ServiceUnavailableError}
     *
     * @example
     *     await client.nftTemplates.getTemplate("default-solana", "templateId")
     */
    public async getTemplate(
        collectionId: string,
        templateId: string,
        requestOptions?: NftTemplates.RequestOptions
    ): Promise<Crossmint.TemplateResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CrossmintEnvironment.Staging,
                `2022-06-09/collections/${encodeURIComponent(collectionId)}/templates/${encodeURIComponent(templateId)}`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "crossmint",
                "X-Fern-SDK-Version": "0.2.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TemplateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Crossmint.BadRequestError(_response.error.body);
                case 403:
                    throw new Crossmint.ForbiddenError(_response.error.body);
                case 404:
                    throw new Crossmint.NotFoundError(_response.error.body);
                case 503:
                    throw new Crossmint.ServiceUnavailableError(_response.error.body);
                default:
                    throw new errors.CrossmintError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CrossmintError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CrossmintTimeoutError();
            case "unknown":
                throw new errors.CrossmintError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a token template with preconfigured metadata
     *
     * **API scope required**: `nfts.create`
     *
     * @param {string} collectionId - This is the identifier for the collection related to the request. Every project has default collections: `default-solana` and `default-polygon`.
     *
     *                                The [create-collection](/api-reference/minting/collection/create-collection) API will result in collections with UUID formatted `collectionId`.
     *                                **Example:** `9c82ef99-617f-497d-9abb-fd355291681b`
     *
     *                                The [create-collection-idempotent](/api-reference/minting/collection/create-collection-idempotent) API allows you to specify an arbitrary identifier during the intitial request.
     *                                **Example:** `your-custom-identifer`
     * @param {string} templateId - The template ID
     * @param {Crossmint.CreateTemplateBody} request
     * @param {NftTemplates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Crossmint.BadRequestError}
     * @throws {@link Crossmint.NotFoundError}
     * @throws {@link Crossmint.ConflictError}
     * @throws {@link Crossmint.FailedDependencyError}
     * @throws {@link Crossmint.ServiceUnavailableError}
     *
     * @example
     *     await client.nftTemplates.createTemplateIdempotent("default-solana", "templateId", {})
     */
    public async createTemplateIdempotent(
        collectionId: string,
        templateId: string,
        request: Crossmint.CreateTemplateBody,
        requestOptions?: NftTemplates.RequestOptions
    ): Promise<Crossmint.TemplateResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CrossmintEnvironment.Staging,
                `2022-06-09/collections/${encodeURIComponent(collectionId)}/templates/${encodeURIComponent(templateId)}`
            ),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "crossmint",
                "X-Fern-SDK-Version": "0.2.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateTemplateBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TemplateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Crossmint.BadRequestError(_response.error.body);
                case 404:
                    throw new Crossmint.NotFoundError(_response.error.body);
                case 409:
                    throw new Crossmint.ConflictError(_response.error.body);
                case 424:
                    throw new Crossmint.FailedDependencyError(
                        serializers.FourHundredTwentyFourResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new Crossmint.ServiceUnavailableError(_response.error.body);
                default:
                    throw new errors.CrossmintError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CrossmintError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CrossmintTimeoutError();
            case "unknown":
                throw new errors.CrossmintError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete a Token template.
     *
     * **API scope required**: `nfts.delete`
     *
     * @param {string} collectionId - This is the identifier for the collection related to the request. Every project has default collections: `default-solana` and `default-polygon`.
     *
     *                                The [create-collection](/api-reference/minting/collection/create-collection) API will result in collections with UUID formatted `collectionId`.
     *                                **Example:** `9c82ef99-617f-497d-9abb-fd355291681b`
     *
     *                                The [create-collection-idempotent](/api-reference/minting/collection/create-collection-idempotent) API allows you to specify an arbitrary identifier during the intitial request.
     *                                **Example:** `your-custom-identifer`
     * @param {string} templateId - The template ID
     * @param {NftTemplates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Crossmint.BadRequestError}
     * @throws {@link Crossmint.ForbiddenError}
     * @throws {@link Crossmint.NotFoundError}
     * @throws {@link Crossmint.ServiceUnavailableError}
     *
     * @example
     *     await client.nftTemplates.deleteTemplate("default-solana", "templateId")
     */
    public async deleteTemplate(
        collectionId: string,
        templateId: string,
        requestOptions?: NftTemplates.RequestOptions
    ): Promise<void> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CrossmintEnvironment.Staging,
                `2022-06-09/collections/${encodeURIComponent(collectionId)}/templates/${encodeURIComponent(templateId)}`
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "crossmint",
                "X-Fern-SDK-Version": "0.2.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Crossmint.BadRequestError(_response.error.body);
                case 403:
                    throw new Crossmint.ForbiddenError(_response.error.body);
                case 404:
                    throw new Crossmint.NotFoundError(_response.error.body);
                case 503:
                    throw new Crossmint.ServiceUnavailableError(_response.error.body);
                default:
                    throw new errors.CrossmintError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CrossmintError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CrossmintTimeoutError();
            case "unknown":
                throw new errors.CrossmintError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Edit a Token template.
     *
     * **API scope required**: `nfts.update`
     *
     * @param {string} collectionId - This is the identifier for the collection related to the request. Every project has default collections: `default-solana` and `default-polygon`.
     *
     *                                The [create-collection](/api-reference/minting/collection/create-collection) API will result in collections with UUID formatted `collectionId`.
     *                                **Example:** `9c82ef99-617f-497d-9abb-fd355291681b`
     *
     *                                The [create-collection-idempotent](/api-reference/minting/collection/create-collection-idempotent) API allows you to specify an arbitrary identifier during the intitial request.
     *                                **Example:** `your-custom-identifer`
     * @param {string} templateId - The template ID
     * @param {Crossmint.EditTemplateRequest} request
     * @param {NftTemplates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Crossmint.BadRequestError}
     * @throws {@link Crossmint.NotFoundError}
     * @throws {@link Crossmint.ServiceUnavailableError}
     *
     * @example
     *     await client.nftTemplates.editTemplate("default-solana", "templateId", {})
     */
    public async editTemplate(
        collectionId: string,
        templateId: string,
        request: Crossmint.EditTemplateRequest,
        requestOptions?: NftTemplates.RequestOptions
    ): Promise<void> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CrossmintEnvironment.Staging,
                `2022-06-09/collections/${encodeURIComponent(collectionId)}/templates/${encodeURIComponent(templateId)}`
            ),
            method: "PATCH",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "crossmint",
                "X-Fern-SDK-Version": "0.2.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.EditTemplateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Crossmint.BadRequestError(_response.error.body);
                case 404:
                    throw new Crossmint.NotFoundError(_response.error.body);
                case 503:
                    throw new Crossmint.ServiceUnavailableError(_response.error.body);
                default:
                    throw new errors.CrossmintError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CrossmintError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CrossmintTimeoutError();
            case "unknown":
                throw new errors.CrossmintError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}
