/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Crossmint from "../../../../../api/index";
import * as core from "../../../../../core";
import { RegisterNftCollectionRequestChain } from "../../types/RegisterNftCollectionRequestChain";
import { RegisterNftCollectionRequestContractType } from "../../types/RegisterNftCollectionRequestContractType";
import { RegisterNftCollectionRequestArgs } from "../../types/RegisterNftCollectionRequestArgs";
import { RegisterNftCollectionRequestMetadata } from "../../types/RegisterNftCollectionRequestMetadata";
import { RegisterNftCollectionRequestOwnership } from "../../types/RegisterNftCollectionRequestOwnership";
import { RegisterNftCollectionRequestCategory } from "../../types/RegisterNftCollectionRequestCategory";
import { RegisterNftCollectionRequestScopesItem } from "../../types/RegisterNftCollectionRequestScopesItem";

export const RegisterNftCollectionRequest: core.serialization.Schema<
    serializers.RegisterNftCollectionRequest.Raw,
    Crossmint.RegisterNftCollectionRequest
> = core.serialization.object({
    chain: RegisterNftCollectionRequestChain,
    contractType: RegisterNftCollectionRequestContractType,
    args: RegisterNftCollectionRequestArgs,
    metadata: RegisterNftCollectionRequestMetadata,
    ownership: RegisterNftCollectionRequestOwnership,
    category: RegisterNftCollectionRequestCategory,
    scopes: core.serialization.list(RegisterNftCollectionRequestScopesItem),
});

export declare namespace RegisterNftCollectionRequest {
    interface Raw {
        chain: RegisterNftCollectionRequestChain.Raw;
        contractType: RegisterNftCollectionRequestContractType.Raw;
        args: RegisterNftCollectionRequestArgs.Raw;
        metadata: RegisterNftCollectionRequestMetadata.Raw;
        ownership: RegisterNftCollectionRequestOwnership.Raw;
        category: RegisterNftCollectionRequestCategory.Raw;
        scopes: RegisterNftCollectionRequestScopesItem.Raw[];
    }
}
