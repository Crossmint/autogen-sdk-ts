types:
  VerifyCredentialResponse:
    properties:
      isValid: optional<boolean>
      error: optional<string>
  VcCreateTemplateRequestMetadata:
    properties:
      name:
        type: string
        docs: 'The name of your collection (Max length: 32)'
        validation:
          maxLength: 32
      description:
        type: string
        docs: 'A brief description of credential (Max length: 64)'
        validation:
          maxLength: 64
  VcCreateTemplateRequestCredentialsDelegatedIssuer:
    docs: Issuer information, fill only if using delegatedStorage
    properties:
      did:
        type: optional<string>
        docs: The issuer's did
      endpoint:
        type: optional<string>
        docs: The issuer's endpoint to sign credentials
      token:
        type: optional<string>
        docs: Token used for auth on the issuer endpoint
  VcCreateTemplateRequestCredentials:
    docs: Credentials parameters
    properties:
      type:
        type: string
        docs: >-
          The type of credentials inside the collection (blank or 'default' in
          case no custom type is used)
      storage:
        type: optional<string>
        docs: Where to store the credential
        default: crossmint | decentralized-ipfs | delegated
      delegatedStorageEndpoint:
        type: optional<string>
        docs: >-
          Only if storage is 'delegated', the endpoint to retrieve the
          credential from
      encryption:
        type: optional<string>
        docs: Whether to encrypt the credential using the recipient's wallet
        default: none | decentralized-lit
      delegatedIssuer:
        type: optional<VcCreateTemplateRequestCredentialsDelegatedIssuer>
        docs: Issuer information, fill only if using delegatedStorage
  IssueVcRequestMetadataAttributesItemDisplayType:
    enum:
      - boost_number
      - boost_percentage
      - number
    docs: Display name of your attribute
  IssueVcRequestMetadataAttributesItem:
    properties:
      display_type:
        type: optional<IssueVcRequestMetadataAttributesItemDisplayType>
        docs: Display name of your attribute
      trait_type:
        type: string
        docs: The name of the trait
      value:
        type: string
        docs: The value of the trait
  IssueVcRequestMetadata:
    properties:
      name:
        type: string
        docs: 'The name of your NFT (Max length: 32)'
        validation:
          maxLength: 32
      image:
        type: string
        docs: Direct link to your NFT image
      description:
        type: string
        docs: 'A brief description of the NFT (Max length: 64)'
        validation:
          maxLength: 64
      animation_url:
        type: optional<string>
        docs: |
          **EVM only**

          [See more info here](/minting/advanced/nft-metadata)
      attributes:
        type: optional<list<IssueVcRequestMetadataAttributesItem>>
        docs: Add attributes to your NFT
  IssueVcRequestCredential:
    properties:
      subject:
        docs: >-
          The credential claims object, matching the schema defined on the
          collection types.
        type: map<string, unknown>
      expiresAt:
        type: optional<string>
        docs: optional expiration date in  ISO 8601
        default: '2023-08-31T16:34:33.854Z'
  IssueVcResponseOnChain:
    properties:
      status: optional<string>
      chain: optional<string>
      contractAddress: optional<string>
  IssueVcResponse:
    properties:
      credentialId:
        type: optional<string>
        docs: The credential id
      id: optional<string>
      onChain: optional<IssueVcResponseOnChain>
  CreateTypeRequestCredentialSubjectSchemaItem:
    properties:
      name:
        type: string
        docs: The name of credential subject property
        default: user_email
      type:
        type: string
        docs: The type of credential subject property
        default: basetype or nestedTypeSchema
  CreateTypeRequestNestedTypeSchemaItem:
    properties:
      name:
        type: string
        default: age
      type:
        type: string
        default: uint16
  CreateTypeResponse:
    properties:
      id:
        type: optional<string>
        docs: The type name
  GetTypeResponseCredentialSubjectSchemaItem:
    properties:
      name: optional<string>
      type: optional<string>
  GetTypeResponse:
    properties:
      name: optional<string>
      credentialSubjectSchema: optional<list<GetTypeResponseCredentialSubjectSchemaItem>>
  CreateTypeIdempotentRequestCredentialSubjectSchemaItem:
    properties:
      name:
        type: string
        docs: The name of credential subject property
        default: user_email
      type:
        type: string
        docs: The type of credential subject property
        default: basetype or nestedTypeSchema
  CreateTypeIdempotentRequestNestedTypeSchemaItem:
    properties:
      name:
        type: string
        default: age
      type:
        type: string
        default: uint16
  CreateTypeIdempotentResponse:
    properties:
      id:
        type: optional<string>
        docs: The type name
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    verify-credential:
      path: /unstable/credentials/verify
      method: POST
      auth: true
      docs: |
        Verify that a credential is valid.

        **API scope required** `credentials.read`
      display-name: Verify Credential
      request:
        name: VerifyCredentialRequest
        body:
          properties:
            credential:
              docs: The JSON representing a credential.
              type: map<string, unknown>
      response:
        docs: Success.
        type: VerifyCredentialResponse
      errors:
        - root.BadRequestError
      examples:
        - name: valid
          request:
            credential:
              key: value
          response:
            body:
              isValid: true
              error: null / "error message"
        - name: invalid revoked
          request:
            credential:
              key: value
          response:
            body:
              isValid: false
              error: Credential Revoked
        - name: invalid expired
          request:
            credential:
              key: value
          response:
            body:
              isValid: false
              error: Credential expired at <date>
        - name: invalid proof
          request:
            credential:
              key: value
          response:
            body:
              isValid: false
              error: Invalid proof
    vc-create-template:
      path: /unstable/credentials/templates/
      method: POST
      auth: true
      docs: >
        Create a template (similar to an nft collection) for issuing verifiable
        credentials.


        **API scope required** `credentials:template.create`
      display-name: Create VC template
      request:
        name: VcCreateTemplateRequest
        body:
          properties:
            metadata: VcCreateTemplateRequestMetadata
            chain:
              type: literal<"polygon">
              docs: The chain to mint the nft on
            credentials:
              type: VcCreateTemplateRequestCredentials
              docs: Credentials parameters
      response:
        docs: >-
          Success. Refer to the standard create collection response for more
          details.
        type: string
      errors:
        - root.BadRequestError
      examples:
        - request:
            metadata:
              name: Verifiable Credential
              description: The owner of this credential is authorized.
            chain: polygon
            credentials:
              type: degreeForMastersStudent
          response:
            body: >-
              Success. Refer to the standard nft create collection response for
              more details.
    get-vc:
      path: /unstable/collections/{collectionId}/nfts/{id}/credentials
      method: GET
      auth: true
      docs: >
        Get a verifiable credential by the ID associated with the minted NFT.


        This ID will have the format: `<UUID>`. For example:
        `d7eb777b-e9b4-4f34-ab5f-ce199111166a`


        **API scope required** `credentials.read`. This endpoint will not work
        with a client side API key.
      path-parameters:
        collectionId:
          type: string
          docs: Collection id (template id)
        id:
          type: string
          docs: >
            UUID of the NFT returned in the NFT creation response. Format is:
            `<UUID>`
      display-name: Get VC by NFT ID
      response:
        docs: Success.
        type: map<string, unknown>
      errors:
        - root.BadRequestError
        - root.NotFoundError
      examples:
        - path-parameters:
            collectionId: collectionId
            id: id
          response:
            body:
              value:
                id: <CREDENTIAL_ID>
                credentialSubject:
                  id: 0xSUBJECT_ADDRESS
                  ...additional fields: ...
                nft:
                  tokenId: <tokenId>
                  chain: polygon
                  contractAddress: <collection_contract_address>
                expirationDate: '2234-12-12'
                '@context':
                  - https://www.w3.org/2018/credentials/v1
                  - >-
                    https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html
                issuer:
                  id: did:0xISSUER_ADDRESS
                type:
                  - VerifiableCredential
                  - 64f0c05641a512c86786fd3b
                issuanceDate: '2023-08-31T16:34:33.854Z'
                proof:
                  proofValue: ProofValue
                  ...additional required fields: ...
    get-vc-by-id:
      path: /unstable/credentials/{id}
      method: GET
      auth: true
      docs: >
        Get a verifiable credential by the ID associated with it. 


        This ID will have the format: `urn:uuid:<UUID>`. For example:
        `urn:uuid:64f9877d-a19a-4205-8d61-f8c2abed5766`


        **API scope required** `credentials.read`. This enpoint will work also
        with a client side API key.
      path-parameters:
        id:
          type: string
          docs: >
            Unique ID of the credential as returned in the NFT creation
            response. Format is: `urn:uuid:<UUID>`
      display-name: Get VC by Credential ID
      response:
        docs: Success.
        type: map<string, unknown>
      errors:
        - root.BadRequestError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              value:
                id: <CREDENTIAL_ID>
                credentialSubject:
                  id: 0xSUBJECT_ADDRESS
                  ...additional fields: ...
                nft:
                  tokenId: <tokenId>
                  chain: polygon
                  contractAddress: <collection_contract_address>
                expirationDate: '2234-12-12'
                '@context':
                  - https://www.w3.org/2018/credentials/v1
                  - >-
                    https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html
                issuer:
                  id: did:0xISSUER_ADDRESS
                type:
                  - VerifiableCredential
                  - 64f0c05641a512c86786fd3b
                issuanceDate: '2023-08-31T16:34:33.854Z'
                proof:
                  proofValue: ProofValue
                  ...additional required fields: ...
    revoke-credential:
      path: /unstable/credentials/{id}
      method: DELETE
      auth: true
      docs: >
        Revoke a verifiable credential by the credential ID. 

        This involves burning the associated nft.


        This ID will have the format: `urn:uuid:<UUID>`. For example:
        `urn:uuid:64f9877d-a19a-4205-8d61-f8c2abed5766`


        **API scope required** `credentials.create`.
      path-parameters:
        id:
          type: string
          docs: >
            Unique ID of the credential as returned in the NFT creation
            response. Format is: `urn:uuid:<UUID>`
      display-name: Revoke credential by id
      response:
        docs: Success
        type: root.BurnNftResponse
      errors:
        - root.ForbiddenError
        - root.NotFoundError
        - root.ServiceUnavailableError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              actionId: 201520fc-e0eb-4698-a2f3-c6b50cc7c894
              action: nfts.delete
              status: pending OR succeeded
              data:
                chain: polygon
                txId: >-
                  succeeded status ONLY -
                  0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081
                collection:
                  id: default-polygon
                  contractAddress: '0x67a602CBb306b3DBaaC7ECf55b72EED0E04Dc785'
                token:
                  id: 799a6f68-e2ea-4126-8577-4298dfcf900c
                  tokenId: '7'
              startedAt: '2024-01-10T23:01:45Z'
              completedAt: '2024-01-15T09:30:00Z'
              resource: >-
                https://staging.crossmint.com/api/2022-06-09/collections/default-polygon/nfts/201520fc-e0eb-4698-a2f3-c6b50cc7c894
    get-vc-by-locator:
      path: /unstable/nfts/{nftLocator}/credentials
      method: GET
      auth: true
      docs: >
        Get a verifiable credential by the NFT locator. 


        This locator will have the format:
        `<chain>:<contract_address>:<tokenId>`. 

        For example: `polygon:0x1234abcde...:1`


        **API scope required** `credentials.read`. This enpoint will work also
        with a client side API key.
      path-parameters:
        nftLocator:
          type: string
          docs: >-
            NFT on chain locator, in the format of
            `<chain>:<contract_address>:<tokenId>`
      display-name: Get VC by NFT Locator
      response:
        docs: Success.
        type: map<string, unknown>
      errors:
        - root.BadRequestError
        - root.NotFoundError
      examples:
        - path-parameters:
            nftLocator: nftLocator
          response:
            body:
              value:
                id: <CREDENTIAL_ID>
                credentialSubject:
                  id: 0xSUBJECT_ADDRESS
                  ...additional fields: ...
                nft:
                  tokenId: <tokenId>
                  chain: polygon
                  contractAddress: <collection_contract_address>
                expirationDate: '2234-12-12'
                '@context':
                  - https://www.w3.org/2018/credentials/v1
                  - >-
                    https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html
                issuer:
                  id: did:0xISSUER_ADDRESS
                type:
                  - VerifiableCredential
                  - 64f0c05641a512c86786fd3b
                issuanceDate: '2023-08-31T16:34:33.854Z'
                proof:
                  proofValue: ProofValue
                  ...additional required fields: ...
    issue-vc:
      path: /unstable/credentials/templates/{templateId}/vcs
      method: POST
      auth: true
      docs: >
        Issue a verifiable credential. Deliver to a web3 wallet or email
        address.


        **API scope required** `credentials.create`
      path-parameters:
        templateId:
          type: string
          docs: Template id of a credential enabled collection
      display-name: Issue VC
      request:
        name: IssueVcRequest
        body:
          properties:
            recipient:
              type: string
              docs: >-
                Recipient address in the format of `<chain>:<address>` or 
                `email:<email_address>:<chain>`.
            metadata: optional<IssueVcRequestMetadata>
            credential: IssueVcRequestCredential
      response:
        docs: Success.
        type: IssueVcResponse
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.ServiceUnavailableError
      examples:
        - name: Pending
          path-parameters:
            templateId: default
          request:
            recipient: polygon:0x1234abcde... or email:<email_address>:polygon
            credential:
              subject:
                subjectName: foo
                subjectAge: 20
                claim: bar
          response:
            body:
              credentialId: urn:uuid:40ada19e-3b4a-4de0-8d61-e0e7aedbfa0
              id: 1938b38c-3037-45dc-8033-333b7ebaee7
              onChain:
                status: status
                chain: chain
                contractAddress: contractAddress
    create-type:
      path: /unstable/credentials/types
      method: POST
      auth: true
      docs: >
        Create a type with a random UUID. This is how you define a custom
        schema.


        **API scope required** `credentials.create`
      display-name: Create VC Type
      request:
        name: CreateTypeRequest
        body:
          properties:
            credentialSubjectSchema: list<CreateTypeRequestCredentialSubjectSchemaItem>
            nestedTypeSchema: optional<list<CreateTypeRequestNestedTypeSchemaItem>>
      response:
        docs: Success.
        type: CreateTypeResponse
      errors:
        - root.BadRequestError
      examples:
        - request:
            credentialSubjectSchema:
              - name: username
                type: string
              - name: courses_completed
                type: uint64
              - name: courses
                type: Course[]
          response:
            body:
              id: 64f0c05641a512c86786fd3b
    get-type:
      path: /unstable/credentials/types/{typeName}
      method: GET
      auth: true
      docs: |
        Get the schema of a given type by name
                
        **API scope required** `credentials.read`
      path-parameters:
        typeName:
          type: string
          docs: The name of the type
      display-name: Get a Type
      response:
        docs: Success.
        type: GetTypeResponse
      errors:
        - root.BadRequestError
      examples:
        - path-parameters:
            typeName: typeName
          response:
            body:
              name: 64f0c05641a512c86786fd3b
              credentialSubjectSchema:
                - name: age
                  type: uint8
                - name: name
                  type: string
    create-type-idempotent:
      path: /unstable/credentials/types/{typeName}
      method: PUT
      auth: true
      docs: |
        Create a type with a given name. This is how you define a custom schema.

        **API scope required** `credentials.create`
      path-parameters:
        typeName:
          type: string
          docs: The name of the type
      display-name: Create VC Type with name
      request:
        name: CreateTypeIdempotentRequest
        body:
          properties:
            credentialSubjectSchema: list<CreateTypeIdempotentRequestCredentialSubjectSchemaItem>
            nestedTypeSchema: optional<list<CreateTypeIdempotentRequestNestedTypeSchemaItem>>
      response:
        docs: Success.
        type: CreateTypeIdempotentResponse
      errors:
        - root.BadRequestError
      examples:
        - path-parameters:
            typeName: typeName
          request:
            credentialSubjectSchema:
              - name: username
                type: string
              - name: courses_completed
                type: uint64
              - name: courses
                type: Course[]
          response:
            body:
              id: 64f0c05641a512c86786fd3b
